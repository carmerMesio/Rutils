confusionMatrix(data=cartprt,as.factor(test$y)) #with normal variables but dropping x62.
cartprt<-predict(arbol, newdata= test,type = "raw")
confusionMatrix(data=cartprt,as.factor(test$y)) #with normal variables but dropping x62.
setwd("C:/Users/David/Desktop/RUTILS")
library(readr)
library(keras)
install_keras()
install.packages("OpenImageR")
library(OpenImageR)
library(keras)
?dataset_cifar10
list.files("./Desktop")
list.files("./Desktop/ImageREc",pattern = ".png")
list.files("./Desktop/ImageREc/bonsai",pattern = ".png")
list.files("./Desktop/ImageREc/bonsai",pattern = ".jpg")
"./Desktop/ImageREc/bonsai"
getwd()
setwd("./Desktop")
setwd("./Desktop/ImageREc")
setwd("../Desktop/ImageREc")
list.files("C/Users/David/Desktop/ImageREc/bonsai",pattern = ".jpg")
list.files("C:/Users/David/Desktop/ImageREc/bonsai",pattern = ".jpg")
j<-list.files("C:/Users/David/Desktop/ImageREc/bonsai",pattern = ".jpg")
j
j[1]
length(j)
readImage(j[1])
path = "C:/Users/David/Desktop/ImageREc/bonsai"
image = readImage(paste0(path,j[i]))
image = readImage(paste0(path,j[1]))
j
j[1]
paste0(path,j[i])
paste0(path,j[1])
path = "C:/Users/David/Desktop/ImageREc/bonsai/"
image = readImage(paste0(path,j[i]))
image = readImage(paste0(path,j[1]))
image
?readImage
image = image * 255
hog = HOG(image, cells = 3, orientations = 9)
hog
?HOG
hog = HOG(image, cells = 3, orientations = 9)
hog
combof = matrix(nrow=length(j),ncol=81)
combof
for (i in 1:length(j)){
image = readImage(paste0(path,j[i]))
image = image * 255
hog = HOG(image, cells = 3, orientations = 9)
hog
combof[i,] = hog
}
combof
combof[1,1]
combof[1,]
combof[81,]
hog
combof[128,]
hog
data.frame(combof)
path2 = "C:/Users/David/Desktop/ImageREc/brain/"
m<-list.files("C:/Users/David/Desktop/ImageREc/brain",pattern = ".jpg")
length(j)
length(m)
minim = which.min(length(j),length(m))
min(length(j),length(m))
minim = min(length(j),length(m))
cbind(combof,combof2)
combof2 = matrix(nrow=length(m),ncol=81)
cbind(combof,combof2)
minim = min(length(j),length(m))
combof = matrix(nrow=minim,ncol=81)
combof2 = matrix(nrow=minim,ncol=81)
cbind(combof,combof2)
j<-list.files("C:/Users/David/Desktop/ImageREc/bonsai",pattern = ".jpg")
m<-list.files("C:/Users/David/Desktop/ImageREc/brain",pattern = ".jpg")
path = "C:/Users/David/Desktop/ImageREc/bonsai/"
path2 = "C:/Users/David/Desktop/ImageREc/brain/"
minim = min(length(j),length(m))
combof = matrix(nrow=minim,ncol=81)
combof2 = matrix(nrow=minim,ncol=81)
for (i in 1:minim){
image = readImage(paste0(path,j[i]))
image = image * 255
image2 = readImage(paste0(path,m[i]))
image2 = image2 * 255
hog = HOG(image, cells = 3, orientations = 9)
hog2 = HOG(image2, cells = 3, orientations = 9)
combof[i,] = hog
combof2[i,] = hog2
}
dataimage = data.frame(cbind(combof,combof2))
dataimage
dataimage = data.frame(rbind(combof,combof2))
dataimage
rep("bonsai","brain",each=minim)
?rep
rep(c("bonsai","brain"),each=minim)
resp <- rep(c("bonsai","brain"),each=minim)
?layer_dense
library(caret)
dataimage = cbind(dataimage,resp)
indexi = createDataPartition(dataimage$resp,times = 2,p = 0.7)
indexi
indexi = createDataPartition(dataimage$resp,times = 1,p = 0.7)
train_x = dataimage[indexi,]
indexi
indexi = createDataPartition(dataimage$resp,times = 1,p = 0.7)
indexi = createDataPartition(dataimage$resp,times = 1,p = 0.7,list = FALSE)
train_x = dataimage[indexi,]
test_x = dataimage[-indexi,]
names(dataimage)
str(train_x)
test_y = dataimage[-indexi,82]
indexi = createDataPartition(dataimage$resp,times = 1,p = 0.7,list = FALSE)
train_x = dataimage[indexi,-82]
test_x = dataimage[-indexi,-82]
train_y = dataimage[indexi,82]
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = "accuracy"
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y
train_y = ifelse(train_y=="bonsai",1,0)
train_y
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_x = dataimage[indexi,-82]
test_x = dataimage[-indexi,-82]
train_y = dataimage[indexi,82]
train_y = ifelse(train_y=="bonsai",1,0)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.1
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.05
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 100,
validation_split = 0.2
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 50,
validation_split = 0.2
)
history <- model %>% fit(
train_x, train_y,
epochs = 10, batch_size = 50,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = "sigmoid")
model
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
dim(train_x)
ncol(train_x)
str(train_x)
str(train_y)
train_y = ifelse(train_y=="bonsai",1,0) %>% as.factor()
str(train_y)
train_y = dataimage[indexi,82]
train_y = ifelse(train_y=="bonsai",1,0) %>% as.factor()
str(train_y)
table(train_y)
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y = dataimage[indexi,82]
train_y = ifelse(train_y=="bonsai",1,0)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = nrow(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_x = dataimage[indexi,-82] %>% as.matrix()
test_x = dataimage[-indexi,-82] %>% as.matrix()
train_y = dataimage[indexi,82] %>% as.matrix()
train_x
train_y
train_y = ifelse(train_y=="bonsai",1,0)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = nrow(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
ncol(train_x)
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y = ifelse(train_y=="bonsai",1,0) %>% as.factor()
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y = ifelse(train_y=="bonsai",1,0)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y = ifelse(train_y=="bonsai",1,0)
train_y = to_categorical(train_y)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
train_y
train_y = dataimage[indexi,82] %>% as.matrix()
train_y = ifelse(train_y=="bonsai",1,0)
train_y
to_categorical(train_y)
train_y = to_categorical(train_y)
test_y = dataimage[-indexi,82]
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
history <- model %>% fit(
train_x, train_y,
epochs = 50, batch_size = 128,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
layer_dense(units = 81, activation = "relu", input_shape = ncol(train_x)) %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dropout(rate = 0.1) %>%
layer_dense(units = 2, activation = "sigmoid")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c("accuracy")
)
history <- model %>% fit(
train_x, train_y,
epochs = 50, batch_size = 128,
validation_split = 0.2
)
model %>% predict_classes(test_x)
test_y
test_y = ifelse(test_y=="bonsai",1,0)
model %>% predict_classes(test_x)
test_y
